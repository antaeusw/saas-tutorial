# Generated by Django 5.0.12 on 2025-03-12 13:56

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Datacenter',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('location', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('project_name', models.CharField(max_length=255)),
                ('datacenter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='energy_model.datacenter')),
            ],
        ),
        migrations.CreateModel(
            name='Lighting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lighting_type', models.CharField(choices=[('Fluorescent Tubes', 'Fluorescent Tubes'), ('LED', 'LED')], max_length=100)),
                ('lighting_load_Wm2', models.FloatField(help_text='Look up table based on type of lighting', validators=[django.core.validators.MinValueValidator(0)])),
                ('lighting_controls', models.CharField(choices=[('On 24/7', 'On 24/7'), ('Motion Sensors', 'Motion Sensors')], max_length=100)),
                ('on_for_hoursyear', models.FloatField(help_text='Calculated depending on lighting controls and occupancy assumptions', validators=[django.core.validators.MinValueValidator(0)])),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='lighting', to='energy_model.project')),
            ],
        ),
        migrations.CreateModel(
            name='EnergyResults',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('E_DC_input_kWh', models.FloatField(help_text='Optional user input')),
                ('E_DC_calc_kWh', models.FloatField(editable=False)),
                ('E_IT_input_kWh', models.FloatField(help_text='User input')),
                ('E_chiller_calc_kWh', models.FloatField(editable=False, help_text='Only calculated if the system includes chillers')),
                ('E_cooling_tower_calc_kWh', models.FloatField(editable=False, help_text='Only calculated when CTs are present')),
                ('E_pump_cw_calc', models.FloatField(editable=False, help_text='Condenser water pumps calculation')),
                ('E_pump_chw_primary_calc_kWh', models.FloatField(editable=False, help_text='Only calculated if chilled water is present')),
                ('E_pump_chw_secondary_calc_kWh', models.FloatField(editable=False, help_text='Only calculated if chilled water is present')),
                ('E_CRAH_calc_kWh', models.FloatField(editable=False)),
                ('E_CRAC_calc_kWh', models.FloatField(editable=False)),
                ('E_MAU_calc_kWh', models.FloatField(editable=False, help_text='MAU may or may not include hum and dehum')),
                ('E_Humidifier_InRoom_kWh', models.FloatField(editable=False)),
                ('E_Dehum_InRoom_kWh', models.FloatField(editable=False)),
                ('E_UPS_calc_kWh', models.FloatField(editable=False)),
                ('E_TX_calc_kWh', models.FloatField(editable=False)),
                ('E_generator_heating_calc_kWh', models.FloatField(editable=False)),
                ('E_lighting_calc_kWh', models.FloatField(editable=False)),
                ('E_cable_losses_calc_kWh', models.FloatField(editable=False)),
                ('E_un_accounted_calc_kWh', models.FloatField(editable=False)),
                ('PUE_calc', models.FloatField(editable=False, help_text='Three decimal places')),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='energy_results', to='energy_model.project')),
            ],
        ),
        migrations.CreateModel(
            name='Datahall',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area_m2', models.FloatField(help_text='Required for lighting calculation', validators=[django.core.validators.MinValueValidator(0)])),
                ('design_load_density_kWm2', models.FloatField(help_text='Optional input for CRAH calculations', validators=[django.core.validators.MinValueValidator(0)])),
                ('design_IT_load_kW', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('server_dT_in_Kelvin', models.FloatField(default=12, help_text='Assumption default', validators=[django.core.validators.MinValueValidator(0)])),
                ('type_air_cooling', models.CharField(choices=[('CRAH (chilled water)', 'CRAH (chilled water)'), ('CRAC (DX)', 'CRAC (DX)')], help_text='Determines what config is used for cooling energy calculations', max_length=100)),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='datahall', to='energy_model.project')),
            ],
        ),
        migrations.CreateModel(
            name='CRAH',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cooling_capacity_in_kW', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('rated_airflow_m3s', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('max_fan_power_kW', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('average_dT_in_Kelvin', models.FloatField(help_text='Input or assumption depending on datahall containment level', validators=[django.core.validators.MinValueValidator(0)])),
                ('supply_air_temperature_in_C', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('return_air_temperature_avg_in_C', models.FloatField(help_text='Supply air temperature plus average delta T', validators=[django.core.validators.MinValueValidator(0)])),
                ('air_to_water_approach_temperature_in_C', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('chilled_water_exit_temperature_in_C', models.FloatField(help_text='RAT average minus the air-water-approach', validators=[django.core.validators.MinValueValidator(0)])),
                ('required_airflow_m3s', models.FloatField(editable=False, validators=[django.core.validators.MinValueValidator(0)])),
                ('min_fan_speed_percent', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('design_redundancy', models.CharField(choices=[('N+1', 'N+1'), ('N+20%', 'N+20%'), ('2N', '2N')], max_length=50)),
                ('redundancy_factor', models.FloatField(editable=False, validators=[django.core.validators.MinValueValidator(0)])),
                ('quantity_for_N_redundancy', models.FloatField(editable=False, validators=[django.core.validators.MinValueValidator(0)])),
                ('quantity_installed_estimate', models.IntegerField(editable=False, validators=[django.core.validators.MinValueValidator(0)])),
                ('quantity_installed_input', models.IntegerField(blank=True, help_text='If user inputs a figure then we use this in calculations', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('quantity_installed_used', models.IntegerField(editable=False, validators=[django.core.validators.MinValueValidator(0)])),
                ('maximum_total_CRAH_airflow_m3s', models.FloatField(editable=False, validators=[django.core.validators.MinValueValidator(0)])),
                ('average_fan_speed_percent', models.FloatField(editable=False, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('average_fan_power_kW', models.FloatField(editable=False, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_fan_power_kW', models.FloatField(editable=False, validators=[django.core.validators.MinValueValidator(0)])),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='crah', to='energy_model.project')),
            ],
        ),
        migrations.CreateModel(
            name='CHWPump',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pump_type', models.CharField(choices=[('Inline', 'Inline'), ('Close Coupled', 'Close Coupled')], max_length=100)),
                ('pump_design_thermal_load_kW', models.FloatField(help_text='Design IT load plus additional thermal load', validators=[django.core.validators.MinValueValidator(0)])),
                ('qty_pumps_running_in_parallel', models.IntegerField(help_text='Normally designed for N+1, 1 pump running', validators=[django.core.validators.MinValueValidator(0)])),
                ('design_pressure_kPa', models.FloatField(help_text='Typical design point is 250-350kPA', validators=[django.core.validators.MinValueValidator(0)])),
                ('design_efficiency_percent', models.FloatField(help_text='Typical design point is 50% at peak pressure delivery', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('design_pump_flow_kgs', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('volume_flow_m3s', models.FloatField(editable=False, validators=[django.core.validators.MinValueValidator(0)])),
                ('pump_rated_power_kW', models.FloatField(editable=False, validators=[django.core.validators.MinValueValidator(0)])),
                ('minimum_pump_speed_percent', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('chilled_water_load_kW', models.FloatField(editable=False, help_text='Sum of IT, CRAH fans, lighting, and UPS cooling', validators=[django.core.validators.MinValueValidator(0)])),
                ('chilled_water_operating_dT_in_Kelvin', models.FloatField(help_text='Based on approach temp and average RAT inputs', validators=[django.core.validators.MinValueValidator(0)])),
                ('chilled_water_flow_kgs', models.FloatField(editable=False, help_text='Actual flow calc using load and Q = m cp dT', validators=[django.core.validators.MinValueValidator(0)])),
                ('chilled_water_flow_per_pump_kgs', models.FloatField(editable=False, help_text='Divided by number of pumps operating', validators=[django.core.validators.MinValueValidator(0)])),
                ('pump_speed_un_limited_percent', models.FloatField(editable=False, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('pump_speed_percent', models.FloatField(editable=False, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('pump_power_kW', models.FloatField(editable=False, validators=[django.core.validators.MinValueValidator(0)])),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='chw_pump', to='energy_model.project')),
            ],
        ),
        migrations.CreateModel(
            name='Chiller',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chiller_redundancy_n_plus', models.IntegerField(help_text='Insert the N+ number', validators=[django.core.validators.MinValueValidator(0)])),
                ('water_side_economizer', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10)),
                ('cooling_capacity_kW_thermal', models.FloatField(help_text='Thermal design capacity of the chillers', validators=[django.core.validators.MinValueValidator(0)])),
                ('minimum_CHWS_temp_degC', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('maximum_CHWS_temp_degC', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('economizer_approach_in_Kelvin', models.FloatField(help_text='Approach between CHWS and Ambient temp for economizer', validators=[django.core.validators.MinValueValidator(0)])),
                ('SCOP', models.FloatField(help_text='Will be inferred from model selection and weather', validators=[django.core.validators.MinValueValidator(0)])),
                ('total_chilled_water_load_kW_thermal', models.FloatField(editable=False, help_text='Excludes TX room as assumed has natural ventilation', validators=[django.core.validators.MinValueValidator(0)])),
                ('chiller_average_power_kW', models.FloatField(editable=False, validators=[django.core.validators.MinValueValidator(0)])),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='chiller_settings', to='energy_model.project')),
            ],
        ),
        migrations.CreateModel(
            name='ChilledWaterSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('glycol_content', models.CharField(choices=[('0%', '0%'), ('10%', '10%'), ('20%', '20%'), ('30%', '30%'), ('40%', '40%')], help_text='Modifies the specific heat capacity', max_length=20)),
                ('chw_supply_temp_degC', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(25)])),
                ('cp_water_kJkg_1K', models.FloatField(editable=False, help_text='Index matched to the reference table', validators=[django.core.validators.MinValueValidator(0)])),
                ('design_delta_T_in_Kelvin', models.FloatField(help_text='Typically ranges from 6 to 10C', validators=[django.core.validators.MinValueValidator(0)])),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='chilled_water_settings', to='energy_model.project')),
            ],
        ),
        migrations.CreateModel(
            name='Transformer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transformer_type', models.CharField(choices=[('Dry-Type', 'Dry-Type'), ('Oil Filled', 'Oil Filled'), ('Cast Resin', 'Cast Resin')], max_length=100)),
                ('transformer_unit_capacity_kW', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('quantity_installed_number', models.PositiveIntegerField()),
                ('total_installed_capacity_kW', models.FloatField(help_text='Including redundancy', validators=[django.core.validators.MinValueValidator(0)])),
                ('E_DC_power_kW', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('average_utilization', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('core_loss_factor_percent', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('load_loss_factor_percent', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('TX_total_loss_factor_percent', models.FloatField(editable=False, help_text='= k (Core Loss %) + (Load loss %) x (Actual Load kW / Rated Load kW)', validators=[django.core.validators.MinValueValidator(0)])),
                ('TX_total_loss_kW', models.FloatField(editable=False, validators=[django.core.validators.MinValueValidator(0)])),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='transformer', to='energy_model.project')),
            ],
        ),
        migrations.CreateModel(
            name='UPS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(max_length=255)),
                ('installed_capacity_kW', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('utilization_percent', models.FloatField(help_text='Calculated based on installed capacity and actual IT load', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('operating_mode', models.CharField(choices=[('Double Conversion', 'Double Conversion'), ('Eco Mode', 'Eco Mode')], max_length=100)),
                ('efficiency_percent', models.FloatField(help_text='Interpolate efficiency from table and apply operating mode modifiers', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ups', to='energy_model.project')),
            ],
        ),
    ]
